#!groovy

pipeline {
    agent { label "minikube-rhel7-24gb" }

    options {
        timestamps()
        timeout(time: 90, unit: 'MINUTES')
        buildDiscarder(logRotator(artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '', daysToKeepStr: '60', numToKeepStr: '100'))
    }

    environment {
        PATH = "/tmp:/qa/tools/opt/apache-maven-3.5.4/bin:$PATH"
        JENKINS_BUILD = "true"

        DEVFILE_PATH = "${WORKSPACE}/test-workspace-devfile.yaml"
        CUSTOM_RESOURCE_FILE_PATH = "${WORKSPACE}/custom-resource.yaml"

        SUCCESS_THRESHOLD = 5

        LOGS_AND_CONFIGS ="${WORKSPACE}/logs-and-configs"

        mutableCheImageTag = ""
    }

    parameters {
        string(name: 'cheImageRepo',
                defaultValue: "maxura/che-server",
                description: 'Repo of Che server image')

        string(name: 'cheImageTag',
                defaultValue: "",
                description: 'Tag of Che server image')

        booleanParam(name: 'buildChe',
                defaultValue: true,
                description: 'Should build Che server')

        string(name: 'e2eTestToRun',
                defaultValue: "test-happy-path",
                description: 'TypeScript E2E test to run')
        
        string(name: 'testWorkspaceDevfileUrl',
                defaultValue: "",
                description: 'URL of devfile of test workspace')

        text(name: 'customResourceFileContent',
                defaultValue: "",
                description: 'Content of custom-resource.yaml')

        booleanParam(name: 'createTestWorkspace',
                defaultValue: true,
                description: 'Should create test workspace')

        string(name: 'ghprbSourceBranch',
                defaultValue: "master")

        string(name: 'e2eTestParameters',
                defaultValue: "")
    }

    stages {
        stage("Setup environment") {
            steps {
                script {
                    if (cheImageTag == null || cheImageTag == '') {
                        mutableCheImageTag = ghprbPullId
                    } else {
                        mutableCheImageTag = cheImageTag
                    }

                    if (customResourceFileContent == null || customResourceFileContent == '') {
                        sh """
                            wget https://raw.githubusercontent.com/eclipse/che-operator/master/deploy/crds/org_v1_che_cr.yaml \\
                            -O $CUSTOM_RESOURCE_FILE_PATH                                                  
                        """

                    } else {
                        writeFile file: CUSTOM_RESOURCE_FILE_PATH, text: customResourceFileContent
                    }
                }
            }
        }

        stage("Prepare to start Che on K8S") {
            failFast true

            parallel {
                stage("Download chectl") {
                    steps {
                        script {
                            retry(2) {
                                // TO-DO use option "--install-path" https://github.com/eclipse/che/pull/14182
                                sh """
                                curl -sL https://www.eclipse.org/che/chectl/ > install_chectl.sh
                                chmod +x install_chectl.sh
                                sudo PATH=$PATH ./install_chectl.sh --channel=next
                                sudo mv /usr/local/bin/chectl ${WORKSPACE}/chectl
                                sudo chmod +x ${WORKSPACE}/chectl
                                """
                            }
                        }
                    }
                }

                stage("Start Kubernetes") {
                    steps {
                        script {
                            retry(2) {
                                echo "Workaround k8s error https://github.com/eclipse/che/issues/14902"
                                sh """
                                    cat /etc/sysctl.conf
                                    echo "net.bridge.bridge-nf-call-iptables = 1" | sudo tee -a /etc/sysctl.conf
                                    sudo sysctl -p
                                """

                                sh """
                                    # https://github.com/kubernetes/minikube/blob/master/docs/vmdriver-none.md
                                    export MINIKUBE_WANTUPDATENOTIFICATION=false
                                    export MINIKUBE_WANTREPORTERRORPROMPT=false
                                    export MINIKUBE_HOME=\$HOME
                                    export CHANGE_MINIKUBE_NONE_USER=true
                                    export KUBECONFIG=\$HOME/.kube/config
                                    export DOCKER_CONFIG=\$HOME/.docker

                                    mkdir -p \$HOME/.kube \$HOME/.minikube
                                    touch \$KUBECONFIG

                                    sudo -E /usr/local/bin/minikube start \\
                                    --vm-driver=none \\
                                    --cpus 4 \\
                                    --memory 13000 \\
                                    --logtostderr
                                """
                            }
                        }
                    }
                }

                stage("Build Che including upstream projects") {
                    when {
                        expression { return buildChe.toString() == 'true' }
                    }

                    steps {
                        echo "buildChe = $params.buildChe"
                        echo "createTestWorkspace = $params.createTestWorkspace"

                        echo "Build branch ${ghprbSourceBranch} of upstream projects"
                        sh """
                            project_list=(
                                eclipse/che-parent
                                eclipse/che-docs
                            )
                            
                            for project in \${project_list[@]};
                            do
                                result=\$(git ls-remote --heads https://github.com/\${project}.git ${ghprbSourceBranch})
                                if [[ \$result == *"refs"* ]]; then
                                    echo "[PRE-BUILD CHECK] found upstream project: \${project} with same branch name: ${ghprbSourceBranch}"
                                    git clone -b ${ghprbSourceBranch} https://github.com/\${project} \${project}
                                    mvn clean install -f ${WORKSPACE}/\${project}/pom.xml -DskipTests
                                else
                                    echo "[PRE-BUILD CHECK] skip build upstream project: \$project, unable to find branch: ${ghprbSourceBranch}."
                                fi
                            done
                        """

                        echo "Build Che"
                        sh "mvn clean install -f ${WORKSPACE}/pom.xml -T 4 -U -DskipTests -Dskip-enforce -Dskip-validate-sources"
                    }
                }

                stage("Pull test images") {
                    steps {
                        script {
                            retry(2) {
                                sh """
                                    docker pull quay.io/eclipse/che-e2e:nightly
                                    docker pull quay.io/eclipse/happy-path:nightly
                                """
                            }
                        }
                    }
                }
            }
        }

        stage("Build and push che-server image") {
            when {
                expression { return buildChe.toString() == 'true' }
            }

            steps {
                withCredentials([string(credentialsId: 'ed71c034-60bc-4fb1-bfdf-9570209076b5', variable: 'maxura_docker_password')]) {
                    sh """
                        ${WORKSPACE}/dockerfiles/che/build.sh --organization:eclipseche --tag:${mutableCheImageTag} --dockerfile:Dockerfile
                        docker tag eclipseche/che-server:${mutableCheImageTag} docker.io/${cheImageRepo}:${mutableCheImageTag}
                        docker login -u maxura -p ${maxura_docker_password}
                        docker push docker.io/${cheImageRepo}:${mutableCheImageTag}
                    """
                }
            }
        }

        stage("Start Che") {
            steps {
                script {
                    echo "Patch Che custom-resource.yaml"
                    sh """
                        sed -i "s|cheImage: ''|cheImage: '${cheImageRepo}'|" $CUSTOM_RESOURCE_FILE_PATH
                        sed -i "s|cheImageTag: 'nightly'|cheImageTag: '${mutableCheImageTag}'|" $CUSTOM_RESOURCE_FILE_PATH
                        sed -i "s|cheLogLevel: INFO|cheLogLevel: DEBUG|" $CUSTOM_RESOURCE_FILE_PATH
                        sed -i "s|ingressDomain: '192.168.99.101.nip.io'|ingressDomain: '\$(minikube ip).nip.io'|" $CUSTOM_RESOURCE_FILE_PATH

                        # temporary workaround to https://github.com/eclipse/che/issues/16292
                        sed -i "s/tlsSupport: true/tlsSupport: false/" $CUSTOM_RESOURCE_FILE_PATH  

                        # TODO: "selfSignedCert: true" so as TLS support is enebled by default 
                        # sed -i "s/selfSignedCert: false/selfSignedCert: true/" $CUSTOM_RESOURCE_FILE_PATH    
                    """

                    echo "Install Che"
                    sh """
                        ${WORKSPACE}/chectl server:start \\
                        --k8spodreadytimeout=180000 \\
                        --installer=operator \\
                        --listr-renderer=verbose \\
                        --platform=minikube \\
                        --che-operator-cr-yaml=$CUSTOM_RESOURCE_FILE_PATH
                    """

                    cheHost = sh(
                            script: "kubectl get ingress che -n=che -o=jsonpath={'.spec.rules[0].host'}",
                            returnStdout: true
                    ).trim()

                    echo "Wait che-server to be available"
                    sh """
                            COUNTER=0;
                            SUCCESS_RATE_COUNTER=0;
                            while true; do
                            if [ \$COUNTER -gt 180 ]; then
                            echo "Unable to get stable route. Exiting"
                            exit 1
                            fi
                            
                            ((COUNTER+=1))
                            
                            
                            STATUS_CODE=\$(curl -k -sL -w "%{http_code}" -I http://${cheHost} -o /dev/null; true) || true
                            
                            echo "Try \${COUNTER}. Status code: \${STATUS_CODE}"
                            if [ "\$STATUS_CODE" == "200" ]; then 
                            ((SUCCESS_RATE_COUNTER+=1))
                            fi
                            sleep 1;
                        
                            if [ \$SUCCESS_RATE_COUNTER == \$SUCCESS_THRESHOLD ]; then 
                            echo "Route is stable enough. Continuing running tests"
                            break
                            fi
                            done
                    """
                }
            }
        }

        stage("Create test workspace") {
            when {
                expression { return createTestWorkspace.toString() == 'true' }
            }

            steps {
                script {
                    if (testWorkspaceDevfileUrl != null && testWorkspaceDevfileUrl != "") {
                        sh "wget $testWorkspaceDevfileUrl -O $DEVFILE_PATH"

                    } else {
                        sh "cp ${WORKSPACE}/tests/e2e/files/happy-path/happy-path-workspace.yaml $DEVFILE_PATH"
                    }

                    sh """   
                        KEYCLOAK_BASE_URL="http://\$(kubectl get ingress/keycloak -n che -o jsonpath='{.spec.rules[0].host}')/auth"
    
                        USER_ACCESS_TOKEN=\$(curl -X POST \$KEYCLOAK_BASE_URL/realms/che/protocol/openid-connect/token \\
                           -H "Content-Type: application/x-www-form-urlencoded" \\
                           -d "username=admin" \\
                           -d "password=admin" \\
                           -d "grant_type=password" \\
                           -d "client_id=che-public" | jq -r .access_token)
    
                        ${WORKSPACE}/chectl workspace:start \\
                           --devfile=${DEVFILE_PATH} \\
                           --access-token "\$USER_ACCESS_TOKEN"
                    """
                }
            }
        }

        stage("Run E2E Happy path tests") {
            steps {
                sh """                     
                     CHE_URL=http://${cheHost}
                     docker run --shm-size=1g --net=host --ipc=host \\
                       -p 5920:5920 \\
                       -e TS_SELENIUM_DEFAULT_TIMEOUT=300000 \\
                       -e TS_SELENIUM_LOAD_PAGE_TIMEOUT=420000 \\
                       -e TS_SELENIUM_WORKSPACE_STATUS_POLLING=20000 \\
                       -e TS_SELENIUM_BASE_URL=\${CHE_URL} \\
                       -e TS_SELENIUM_LOG_LEVEL='DEBUG' \\
                       -e TS_SELENIUM_MULTIUSER="true" \\
                       -e TS_SELENIUM_USERNAME="admin" \\
                       -e TS_SELENIUM_PASSWORD="admin" \\
                       -e TEST_SUITE="${e2eTestToRun}" ${e2eTestParameters} \\
                       -e NODE_TLS_REJECT_UNAUTHORIZED=0 \\
                       -v ${WORKSPACE}/tests/e2e:/tmp/e2e:Z \\
                       quay.io/eclipse/che-e2e:nightly
                """
            }
        }
    }

    post {
        failure {
            echo "Create screencast from $WORKSPACE/tests/e2e/report/executionScreencast files."
            sh """
                command -v ffmpeg >/dev/null 2>&1 && if ls $WORKSPACE/tests/e2e/report/executionScreencast/*.png 1> /dev/null 2>&1; then
                  cd $WORKSPACE/tests/e2e/report/executionScreencast

                  # remove first screenshot which has lower resolution 800x600 and breaks screencast video
                  sudo rm -f 00100001* || true
                  
                  sudo ffmpeg -framerate 1 -pattern_type glob -i '*.png' -c:v libx264 -r 30  -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -pix_fmt yuv420p $WORKSPACE/tests/e2e/report/screencast.mp4
                  cd $WORKSPACE/tests/e2e/report/
                  sudo rm -rf $WORKSPACE/tests/e2e/report/executionScreencast
                fi
            """
        }

        cleanup {
            sh """                   
                mkdir -p $LOGS_AND_CONFIGS/kubectl
                kubectl --namespace=che get events > $LOGS_AND_CONFIGS/kubectl/events.txt || true
                kubectl --namespace=che get events -o json > $LOGS_AND_CONFIGS/kubectl/events.json || true

                mkdir -p $LOGS_AND_CONFIGS/che-config

                cp ${WORKSPACE}/org_v1_che_cr.yaml $LOGS_AND_CONFIGS/che-config || true
                cp ${DEVFILE_PATH} $LOGS_AND_CONFIGS || true
                cp ${CUSTOM_RESOURCE_FILE_PATH} $LOGS_AND_CONFIGS || true

                kubectl get checluster --namespace=che -o yaml > $LOGS_AND_CONFIGS/che-config/checluster.yaml || true
                kubectl get configmaps --namespace=che che -o yaml > $LOGS_AND_CONFIGS/che-config/configmap.yaml || true
                kubectl get ingresses --namespace=che > $LOGS_AND_CONFIGS/che-config/ingresses.txt || true
                kubectl get pods --namespace=che >$LOGS_AND_CONFIGS/che-config/pods.txt || true
                kubectl get all -n che -o yaml > $LOGS_AND_CONFIGS/che-config/all.yaml || true

                mkdir -p $LOGS_AND_CONFIGS/che-logs
                export PODS=\$(kubectl get pod --namespace=che | awk 'NR>1 {print \$1}')
                for pod in \$PODS ; do \
                    kubectl logs --namespace=che "\${pod}" -n che > $LOGS_AND_CONFIGS/che-logs/"\${pod}".pod.log || true; \
                done

                mkdir -p $LOGS_AND_CONFIGS/workspace-logs
                export WS_POD=\$(kubectl get pod --namespace=che | grep ".workspace-" | awk '{print \$1}')
                for c in \$(kubectl get pod --namespace=che \$WS_POD -o jsonpath="{.spec.containers[*].name}") ; do \\
                    kubectl logs \$(kubectl get pod --namespace=che | grep ".workspace-" | awk '{print \$1}') "\${c}" -n che > $LOGS_AND_CONFIGS/workspace-logs/"\${c}".container.log || true; \\
                done
                kubectl describe pod --namespace=che \$WS_POD > $LOGS_AND_CONFIGS/che-config/workspace-pod-description.txt || true

                mkdir -p $LOGS_AND_CONFIGS/docker
                docker image ls > $LOGS_AND_CONFIGS/docker/images.txt || true
                docker ps -a > $LOGS_AND_CONFIGS/docker/containers.txt || true

                env > $LOGS_AND_CONFIGS/env.output.txt || true
                ${WORKSPACE}/chectl --help > $LOGS_AND_CONFIGS/chectl.version.txt || true

                cp -r /tmp/chectl-logs $LOGS_AND_CONFIGS || true
            """

            archiveArtifacts allowEmptyArchive: true, artifacts: "tests/e2e/report/**, logs-and-configs/**"
        }

    }

}
